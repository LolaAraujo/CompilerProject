start: statement+

statement : declaracion
          | constante
          | entrada
          | salida
          | expression
          | condicional
          | switch
          | loop
          | control_flujo
          | funcion
          | try_catch
          | module
          | exportacion
          | clase
          | herencia
          | polimorfismo
          | encapsulamiento

tipo_dato : "int" | "float" | "bool" | "char" | "string"
            | "array" "<" tipo_dato ">"
            | "struct"
            | "class"
            | "enum"

entrada : "read" "(" identificador ")"
salida : "print" "(" expression ")"

declaracion : tipo_dato? identificador "=" expression
constante : "const" tipo_dato? identificador "=" expression

identificador : IDENTIFICADOR
number : digit+
float_number : digit+ "." digit+

operador_aritmetico : PLUS | MINUS | STAR | SLASH | PERCENT
operador_relacional : LESSTHAN | MORETHAN | LESSEQUAL | MOREEQUAL | EQUAL | NOTEQUAL
operador_logico : AND | OR | NOT
operador_asignacion : ASSIGN | PLUSASSIGN | MINUSASSIGN | STARASSIGN | SLASHASSIGN

expression : term (( PLUS | MINUS ) term)*
term : factor (( STAR | SLASH | PERCENT ) factor)*
factor : number | float_number | identificador | "(" expression ")"

condicional : "if" "(" expression_booleana ")" bloque ("else" bloque)?
expression_booleana : expression operador_relacional expression | expression operador_logico expression

bloque : "{" (declaracion | expression | control_flujo)* "}"

comentario: COMENTARIO_SIMPLE | COMENTARIO_MULTILINEA

switch : "switch" "(" expression ")" "{" casos "}"
casos : (case)+ ("default" ":" bloque)?
case : "case" expression ":" bloque

loop : "for" "(" expression ";" expression ";" expression ")" bloque
       | "while" "(" expression_booleana ")" bloque
       | "do" bloque "while" "(" expression_booleana ")"

control_flujo : "break" | "continue" | "return" expression?

funcion : "func" identificador "(" (parametros)? ")" "->" tipo_dato bloque
parametros : tipo_dato identificador ("," tipo_dato identificador)*

try_catch : "try" bloque "catch" "(" identificador ")" bloque

module : "import" identificador
exportacion : "export" identificador

clase : "class" identificador "{" miembros "}"
miembros : (tipo_dato identificador ";")* (funcion)*
herencia : "class" identificador "extends" identificador "{" miembros "}"
polimorfismo : "override" funcion
encapsulamiento : ("public" | "private" | "protected") tipo_dato identificador

// ✅ DEFINICIÓN DE TOKENS
IDENTIFICADOR: /[a-zA-Z_][a-zA-Z0-9_]*/

PLUS: "+"
MINUS: "-"
STAR: "*"
SLASH: "/"
PERCENT: "%"

LESSTHAN: "<"
MORETHAN: ">"
LESSEQUAL: "<="
MOREEQUAL: ">="
EQUAL: "=="
NOTEQUAL: "!="

AND: "AND"
OR: "OR"
NOT: "NOT"

ASSIGN: "="
PLUSASSIGN: "+="
MINUSASSIGN: "-="
STARASSIGN: "*="
SLASHASSIGN: "/="

// ✅ Comentarios
COMENTARIO_SIMPLE: /\/\/.*/
COMENTARIO_MULTILINEA: /\/\*[\s\S]*?\*\//

%import common.WS
%ignore WS
