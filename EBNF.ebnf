type_data ::= type_specifier declarations
type_data ::= primitive | compuest | user_def

primitive ::= "int" | "float" | "bool" | "char"
compuest ::= "str" | "arr" | "struc"

expression ::= term | expression "+" term | expression "-" term
term ::= factor | term "*" factor | term "/" factor
factor ::= number | "(" expression ")"
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
number ::= digit | number digit

user_def ::= "def_class" | "def_intf" | "def_enum" identifier ":" expression ";"

asignation ::= declarator
declarator ::= varDec | consDec
direct_declarator ::= identifier | "(" declarator ")"

varDec ::= "var" scope identifier lifeTime ":" type_data "=" expression
constDec ::= "const" identifier ":" type_data "=" expression

scope ::= "glob" | "loc" | "block"
lifeTime ::= "stact" | "dinm"

expression ::= conditional_expression | assignment_expression | unary_expression | logic_expression
conditional_expression ::= expression comparison_operator expression
assignment_expression ::= identifier assignment_operator expression
unary_expression ::= unary_operator expression
logic_expression ::= expression logic_operator expression

assignment_operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<=" | ">=" | "!=" | "==" | "<" | ">"
unary_operator ::= "+" | "-" | "*" | "/" | "%"
logic_operator ::= "and" | "or" | "!"

switch ::= expression ":" "case1" expression | "case2" expression | "default" expression jump_stat ";"
loop ::= expression ":" sentencia_expression ";" jump_stat | expression "reload" conditional_expression ":" sentencia_expression jump_stat ";"

jump_stat ::= "goto" ";" | "break" ";" | "continue" ";" | "return" expression ";"

type_func ::= "int" | "float" | "bool" | "char" | "void"
param ::= param_dec | param_list "," param_dec
param_dec ::= identifier ":" type_data
arg ::= expression assignment_operator | expression "," arg assignment_operator

coment ::= "-" short_text
coment ::= "..." long_text "..."

document_code ::= "$" documentation_code "$"

try_statm ::= "try" statment_expression ":" catch conditional_error ";" | "try" statment_expression ":" block except_block "," conditional_error ";"
except ::= "message" ":" name_expression statment_expression | statment_conditional ";"
conditional_error ::= "error" "." New_error "(" "text:" Message_error ")"

import ::= "import" lib | mod
export ::= "export" lib | mod identifier
mod ::= identifier ".mod" | ".mod" identifier | ".mod" user_def

namespace ::= "namespace" identifier ":" "[" cont_namespace "]"
depend ::= "start" mod ";"

class ::= "class" identifier ":" classDef "(" param ")" ":" body_statment ";"
body_statment ::= attrib metd obj
attrib ::= "self" "." identifier "=" expression | identifier "=" expression
metd ::= metd identifier ":" statment_expression
obj ::= type_data declarator "=" identifier "(" param ")"

classInheritance ::= "class" identifier "include" identifierOtherClass ":" body_statment ";"
encapsul ::= "self" "._" identifier "=" expression | identifier
get ::= def_class "get_" declarator ":" "return" encapsul ";"
set ::= def_class "set_" declarator ":" encapsul ";"

class_Intf ::= classIntf identifier ":" "abstract" def_class identifier "[" statm_expression "]"
class_abst ::= depend import "ABC" "," "abstract"
class_abst ::= identifier ":" "abstract" "[" statm_expression "]"

named_expression ::= identifier ":" expression
named_expressions ::= named_expression | named_expressions "," named_expression
list ::= "[" named_expressions "]"
tup ::= "(" named_expressions ")"

key_value_pair ::= named_expression ":" named_expression
key_value_pairs ::= key_value_pair | key_value_pairs "," key_value_pair
dic ::= "{" key_value_pairs "}"

stack ::= "stack" ":" declarator "=" "New stack" "(" expression ")"
col ::= "col" ":" declarator "=" "New col" "(" expression ")"

entry ::= declarator | identifier "=" "entry" "(" text ")"
output ::= prim "(" text "+" entry ")"

openArch ::= declarator | identifier "." "op" "(" url ")"
readArch ::= openArch "." "r" "()"
writeArch ::= openArch "." "w" "(" text ")"
closeArch ::= openArch "." "cl" "()"

modular ::= import | def_class "(" param ")" ":" stat_expression ";" | class